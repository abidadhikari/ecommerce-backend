// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  name                  String
  dob                   DateTime?
  isGoogleAuthenticated Boolean   @default(false)
  email                 String    @unique
  role                  Role      @default(BASIC)
  password              String
  isVerified            Boolean   @default(false)
  token                 String    @default("")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?         @unique
  Review           Review[]
  Cart             Cart[]
  profileImage     String?
  Orders           Orders[]

  // this is model attributes 
  // @@unique([age, name])
  @@index([email])
}

model UserPreference {
  id String @id @default(uuid())

  emailUpdates Boolean

  User User?
}

model Cart {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  count     Int
}

model Product {
  id            String          @id @default(uuid())
  title         String
  brand         String
  description   String?         @db.VarChar(1000)
  price         Int
  crossedPrice  Int?
  thumbnail     String?
  images        ProductImage[]
  Category      Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId    String?
  reviews       Review[]
  ProductRating ProductRating[]
  visibility    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Cart          Cart[]
  Orders        Orders[]
}

model ProductImage {
  id        String   @id @default(uuid())
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  image     String
}

model ProductRating {
  id        String   @id @default(uuid())
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  rating    Float
}

model Category {
  id   String @id @default(uuid())
  name String

  products  Product[]
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Orders {
  id                      String      @id @default(uuid())
  customMessageToCustomer String?
  status                  OrderStatus @default(PENDING)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  Product                 Product?    @relation(fields: [productId], references: [id])
  productId               String?
  quantity                Int
  User                    User        @relation(fields: [userId], references: [id])
  payment_type            PaymentType @default(COD)
  userId                  String
  orderPrice              Int
}

model Review {
  id        String   @id @default(uuid())
  review    String?
  star      Float?
  User      User     @relation(fields: [userId], references: [id])
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  userId    String
}

enum Role {
  BASIC
  ADMIN
  SUPERADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  ON_HOLD
  BACKORDERED
  RETURNED
}

enum PaymentType {
  COD
  ESEWA
}
